{"version":3,"sources":["Components/Icons.js","App.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","changeItem","itemNumber","toast","type","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","ReactDOM","render","document","getElementById"],"mappings":"2SAceA,EAXD,SAAC,GACX,OADoB,EAARC,MAER,IAAK,SACD,OAAO,kBAAC,IAAD,CAAaC,UAAU,SAClC,IAAK,QACD,OAAO,kBAAC,IAAD,CAASA,UAAU,SAC9B,QACI,OAAO,kBAAC,IAAD,CAAOA,UAAU,WCF9BC,G,MAAY,IAAIC,MAAM,GAAGC,KAAK,UAqHrBC,EAnHH,WAAK,IAAD,EACiBC,oBAAS,GAD1B,mBACLC,EADK,KACGC,EADH,OAEuBF,mBAAS,IAFhC,mBAELG,EAFK,KAEMC,EAFN,KA+DNC,EAAa,SAAAC,GACf,OAAGH,EACQI,YAAMJ,EAAW,CAACK,KAAK,YAEP,UAAxBZ,EAAUU,GAIFC,YAAM,iBAAmB,CAACC,KAAO,WAHxCZ,EAAUU,GAAcL,EAAU,QAAU,SAC5CC,GAAYD,QAvDdL,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,YAiBnB,OACI,kBAACa,EAAA,EAAD,CAAWd,UAAU,OACjB,kBAAC,IAAD,CAAgBe,SAAS,kBACzB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGlB,UAAU,eACjBQ,EACG,yBAAKR,UAAU,aACX,wBAAIA,UAAU,2CACTQ,GAEL,kBAACW,EAAA,EAAD,CACAC,MAAM,UACNC,OAAK,EACLC,QAtFP,WAEbf,GAAW,GACXE,EAAc,IACdR,EAAUE,KAAK,QAAQ,EAAE,KA+EL,gBAOJ,wBAAIH,UAAU,4BACTM,EAAU,QAAU,SADzB,UAIJ,yBAAKN,UAAU,QAEPC,EAAUsB,KAAI,SAACC,EAAKC,GAChB,OAAO,kBAACC,EAAA,EAAD,CAAMJ,QAAS,kBAAIZ,EAAWe,KACjC,kBAACE,EAAA,EAAD,CAAU3B,UAAU,OAChB,kBAAC,EAAD,CAAMD,KAAMyB,cC5GpDI,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.f90a0dec.chunk.js","sourcesContent":["import React from 'react';\r\nimport {FaTimes,FaPen,FaRegCircle} from 'react-icons/fa';\r\n\r\nconst Icon  = ({name})=>{\r\n    switch(name){\r\n        case 'circle':\r\n            return <FaRegCircle className=\"icon\" />\r\n        case 'cross':\r\n            return <FaTimes className=\"icon\" />\r\n        default:\r\n            return <FaPen className=\"icon\" />\r\n    }\r\n}\r\n\r\nexport default Icon;","/* eslint-disable no-unused-vars */\r\nimport React, {useState} from 'react';\r\nimport {Card , CardBody , Row , Col , Container , Button} from 'reactstrap';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Icon from './Components/Icons';\r\nimport './App.css';\r\n\r\nconst itemArray = new Array(9).fill(\"empty\");\r\n\r\nconst App = ()=>{\r\n    const [isCross,setIsCross] = useState(false);\r\n    const [winMessage,setWinMessage] = useState(\"\");\r\n\r\n    const reloadGame=()=>{\r\n        //reloads the game\r\n        setIsCross(false);\r\n        setWinMessage(\"\");\r\n        itemArray.fill(\"empty\",0,9);\r\n    }\r\n\r\n    const checkIsWinner = () => {\r\n        //  checking  winner of the game\r\n        if (\r\n          itemArray[0] === itemArray[1] &&\r\n          itemArray[0] === itemArray[2] &&\r\n          itemArray[0] !== \"empty\"\r\n        ) {\r\n          setWinMessage(`${itemArray[0]} won`);\r\n        } else if (\r\n          itemArray[3] !== \"empty\" &&\r\n          itemArray[3] === itemArray[4] &&\r\n          itemArray[4] === itemArray[5]\r\n        ) {\r\n          setWinMessage(`${itemArray[3]} won`);\r\n        } else if (\r\n          itemArray[6] !== \"empty\" &&\r\n          itemArray[6] === itemArray[7] &&\r\n          itemArray[7] === itemArray[8]\r\n        ) {\r\n          setWinMessage(`${itemArray[6]} won`);\r\n        } else if (\r\n          itemArray[0] !== \"empty\" &&\r\n          itemArray[0] === itemArray[3] &&\r\n          itemArray[3] === itemArray[6]\r\n        ) {\r\n          setWinMessage(`${itemArray[0]} won`);\r\n        } else if (\r\n          itemArray[1] !== \"empty\" &&\r\n          itemArray[1] === itemArray[4] &&\r\n          itemArray[4] === itemArray[7]\r\n        ) {\r\n          setWinMessage(`${itemArray[1]} won`);\r\n        } else if (\r\n          itemArray[2] !== \"empty\" &&\r\n          itemArray[2] === itemArray[5] &&\r\n          itemArray[5] === itemArray[8]\r\n        ) {\r\n          setWinMessage(`${itemArray[2]} won`);\r\n        } else if (\r\n          itemArray[0] !== \"empty\" &&\r\n          itemArray[0] === itemArray[4] &&\r\n          itemArray[4] === itemArray[8]\r\n        ) {\r\n          setWinMessage(`${itemArray[0]} won`);\r\n        } else if (\r\n          itemArray[2] !== \"empty\" &&\r\n          itemArray[2] === itemArray[4] &&\r\n          itemArray[4] === itemArray[6]\r\n        ) {\r\n          setWinMessage(`${itemArray[2]} won`);\r\n        }\r\n      };\r\n    const changeItem = itemNumber =>{\r\n        if(winMessage)\r\n            return toast(winMessage,{type:\"success\"})\r\n\r\n        if(itemArray[itemNumber]===\"empty\"){\r\n            itemArray[itemNumber] = isCross ? \"cross\" : \"circle\"\r\n            setIsCross(!isCross)\r\n        }else{\r\n            return toast(\"already filled\" , {type : \"error\"})\r\n        }\r\n\r\n        checkIsWinner();\r\n    }\r\n\r\n    return(\r\n        <Container className=\"p-5\">\r\n            <ToastContainer position=\"bottom-center\" />\r\n            <Row>\r\n                <Col md={6} className=\"offset-md-3\">\r\n                    {winMessage ? (\r\n                        <div className=\"mb-2 mt-2\">\r\n                            <h1 className=\"text-primary text-center text-uppercase\">\r\n                                {winMessage}\r\n                            </h1>\r\n                            <Button \r\n                            color=\"success\"\r\n                            block\r\n                            onClick={reloadGame}\r\n                            >Reload Game</Button>\r\n                        </div>\r\n                    ) : (\r\n                        <h1 className=\"text-center text-warning\">\r\n                            {isCross ? \"cross\" : \"circle\"} turns\r\n                        </h1>\r\n                    )} \r\n                    <div className=\"grid\">\r\n                        {\r\n                            itemArray.map((item,index)=>{\r\n                                return <Card onClick={()=>changeItem(index)}>\r\n                                    <CardBody className=\"box\">\r\n                                        <Icon name={item} />\r\n                                    </CardBody>\r\n                                </Card>\r\n                            })\r\n                        }\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default App;","import React from \"react\"; \r\nimport ReactDOM from \"react-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}